"""
     This application calculates a delta for an option, establishes a portfolio based
     on that delta, and update the portfolio with respect to that delta every month to maintain a risk-free
     portfolio (a hedged portfolio). The Delta value tells us the amount of shares required create a risk-free portfolio.
"""
import numpy as np
import datetime
from datetime import timedelta
from EuroCall import EuropeanCall
from EuroPut import EuropeanPut
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


class LiveOptionsGraph:
    # Portfolio tick can be modified by appending new realtime data rather than randomly generated data
    def time_step(self, z):
        # Calculate dt so we can draw from a normal distribution to model the asset price
        dt = np.busday_count(datetime.date.today(), self.expiration_date) / 252
        if dt != 0:

            # Geometric Brownian Motion is used to generate prices of underlying assets.
            new_asset_price = self.asset_prices[self.index] + np.random.normal(0, (dt**.5))

            # Plot the option price as generated by Black-Scholes model
            if(self.type == 'call'):
                eo = EuropeanCall(new_asset_price, self.strike_price, self.volatility, self.expiration_date, self.risk_free_rate, self.drift)
            elif(self.type == 'put'):
                eo = EuropeanPut(new_asset_price, self.strike_price, self.volatility, self.expiration_date, self.risk_free_rate, self.drift)
            self.option_prices.append(eo.price)
            self.deltas.append(eo.delta)
            self.index_set.append(self.index)
            self.axs[0].cla()
            self.axs[1].cla()
            self.axs[2].cla()
            self.axs[0].plot(self.index_set, self.option_prices, label='Black-Scholes Option Price', c='b')
            # Plot the Delta value
            self.axs[1].plot(self.index_set, self.deltas, label='Delta', c='gray')

            # Plot the asset price and strike price on the 3rd plot, Green if in the money; red if out of the money
            if self.type == 'call':
                if self.strike_price <= self.asset_prices[self.index]:
                    self.axs[2].plot(self.index_set, self.asset_prices, label='Asset Price', c='g')
                    self.axs[2].axhline(y=self.strike_price, label='Call Strike Price', c='gray')
                else:
                    self.axs[2].plot(self.index_set, self.asset_prices, label='Asset Price', c='r')
                    self.axs[2].axhline(y=self.strike_price, label='Call Strike Price', c='gray')
            elif self.type == 'put':
                    if self.strike_price < self.asset_price[self.index]:
                        self.axs[2].plot(self.index_set, self.asset_prices, label='Asset Price', c='r')
                        self.axs[2].axhline(y=self.strike_price, label='Put Strike Price', c='gray')
                    else:
                        self.axs[2].plot(self.index_set, self.asset_prices, label='Asset Price', c='g')
                        self.axs[2].axhline(y=self.strike_price, label='Put Strike Price', c='gray')

            self.axs[0].legend(loc='upper left')
            self.axs[1].legend(loc='upper left')
            self.axs[2].legend(loc='upper left')
            self.asset_prices.append(eo.asset_price)
            self.index = self.index + 1
            self.expiration_date = self.expiration_date - timedelta(days=1)
            print(eo.exercise_prob())


    def __init__(self, european_option, type):
        self.index = 0
        self.asset_price = european_option.asset_price
        self.strike_price = european_option.strike_price
        self.volatility = european_option.volatility
        self.expiration_date = european_option.expiration_date
        self.risk_free_rate = european_option.risk_free_rate
        self.drift = european_option.drift
        self.type = type
        self.index_set = []
        self.option_prices = []
        self.asset_prices = [european_option.asset_price]
        self.deltas = []
        plt.style.use('dark_background')
        self.fig, self.axs = plt.subplots(3)
        self.ani = FuncAnimation(plt.gcf(), self.time_step, 100)
        plt.tight_layout()
        plt.show()


if __name__ == '__main__':
    initial_ec = EuropeanCall(64.5, 65, .4, datetime.date(2023, 1, 31), .06, .2)
    lg = LiveOptionsGraph(initial_ec, 'call')
